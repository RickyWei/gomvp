package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"fmt"

	"github.com/jinzhu/copier"
	"github.com/pkg/errors"
	"github.com/rickywei/sparrow/project/api/middleware"
	"github.com/rickywei/sparrow/project/db"
	"github.com/rickywei/sparrow/project/graph/model"
	"go.mongodb.org/mongo-driver/bson"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.UserInput) (*model.User, error) {
	var err error
	defer func() {
		fmt.Printf("%+v", err)
	}()

	data := &model.User{}
	if err = copier.Copy(data, input); err != nil {
		return nil, errors.Wrap(err, "copy failed")
	}
	err = db.InsertOne(ctx, data)
	if err != nil {
		return nil, errors.Wrap(err, "created failed")
	}
	return data, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, input string) (string, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UserInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input *model.Login) (*model.User, error) {
	gc, err := middleware.GinContextFromContext(ctx)
	if err != nil {
		return nil, err
	}
	filter := bson.D{
		bson.E{Key: "username", Value: input.Username},
		bson.E{Key: "password", Value: input.Password},
	}
	data, err := db.GetOne[*model.User](ctx, 1, 1, filter, nil, nil)
	if err != nil {
		return nil, errors.Wrap(err, "login failed")
	}
	fmt.Println("-----------------------------------")
	fmt.Printf("%+v\n", data)
	fmt.Printf("%+v\n", data.GetMM())
	fmt.Println("-----------------------------------")

	if err = setJwtCookie(gc, *data.GetMM().ID); err != nil {
		return nil, errors.Wrap(err, "set jwt failed")
	}

	return data, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}
